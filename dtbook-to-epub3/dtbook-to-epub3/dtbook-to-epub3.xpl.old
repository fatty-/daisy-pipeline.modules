<?xml version="1.0" encoding="UTF-8"?>
<p:declare-step version="1.0" name="dtbook-to-epub3" type="px:dtbook-to-epub3" xmlns:p="http://www.w3.org/ns/xproc" xmlns:c="http://www.w3.org/ns/xproc-step"
    xmlns:cx="http://xmlcalabash.com/ns/extensions" xmlns:cxo="http://xmlcalabash.com/ns/extensions/osutils" xmlns:px="http://www.daisy.org/ns/pipeline/xproc"
    xmlns:pxi="http://www.daisy.org/ns/pipeline/xproc/internal" xmlns:xd="http://www.daisy.org/ns/pipeline/doc" xmlns:tmp="http://www.daisy.org/ns/pipeline/tmp"
    xmlns:z="http://www.daisy.org/ns/z3986/authoring/" xmlns:dtbook="http://www.daisy.org/z3986/2005/dtbook/" xmlns:html="http://www.w3.org/1999/xhtml"
    exclude-inline-prefixes="cx p c cxo px xd pxi z tmp">

    <p:documentation>
        <xd:short>DTBook to EPUB3</xd:short>
        <xd:detail>Transforms DTBook XML into EPUB3.</xd:detail>
        <xd:homepage>http://code.google.com/p/daisy-pipeline/wiki/DTBookToEPUB3</xd:homepage>
        <xd:author>
            <xd:name>Jostein Austvik Jacobsen</xd:name>
            <xd:mailto>josteinaj@gmail.com</xd:mailto>
            <xd:organization>NLB</xd:organization>
        </xd:author>
    </p:documentation>

    <p:input port="source" primary="true" sequence="true" px:media-type="application/x-dtbook+xml">
        <p:documentation>
            <xd:short>DTBook file(s)</xd:short>
            <xd:detail>One or more DTBook files to be transformed. In the case of multiple files, a merge will be performed.</xd:detail>
        </p:documentation>
    </p:input>

    <p:option name="language" required="false" px:dir="output" px:type="string" select="''">
        <p:documentation>
            <xd:short>Language code</xd:short>
            <xd:detail>Language code of the input document.</xd:detail>
        </p:documentation>
    </p:option>

    <p:option name="output-dir" required="true" px:dir="output" px:type="anyDirURI">
        <p:documentation>
            <xd:short>output-dir</xd:short>
            <xd:detail>Path to output directory for the EPUB.</xd:detail>
        </p:documentation>
    </p:option>

    <p:output port="dbg" primary="true" sequence="true">
        <p:pipe port="result" step="tmp"/>
    </p:output>

    <p:import href="http://xmlcalabash.com/extension/steps/library-1.0.xpl"/>
    <p:import href="http://www.daisy.org/pipeline/modules/dtbook-utils/dtbook-utils-library.xpl">
        <p:documentation>
            <xd:short>Collection of utilities for merging and upgrading DTBook files.</xd:short>
        </p:documentation>
    </p:import>
    <p:import href="http://www.daisy.org/pipeline/modules/dtbook-to-zedai/dtbook2005-3-to-zedai.xpl">
        <p:documentation>
            <xd:short>Converts the DTBook XML of a valid DTBook 2005-3 document into ZedAI.</xd:short>
        </p:documentation>
    </p:import>
    <p:import href="http://www.daisy.org/pipeline/modules/epub3-nav-utils/epub3-nav-library.xpl"/>
    <p:import href="http://www.daisy.org/pipeline/modules/epub3-ocf-utils/xproc/epub3-ocf-library.xpl"/>
    <p:import href="http://www.daisy.org/pipeline/modules/epub3-pub-utils/xproc/epub3-pub-library.xpl"/>
    <p:import href="http://www.daisy.org/pipeline/modules/fileset-utils/xproc/fileset-library.xpl"/>

    <p:variable name="title" select="//dtbook:meta[@name='dc:Title']/@content"/>
    <p:variable name="output-dir-absolute" select="p:resolve-uri(if (ends-with($output-dir,'/')) then $output-dir else concat($output-dir,'/'))"/>
    <p:variable name="epub-dir" select="concat($output-dir-absolute,'epub/')"/>
    <p:variable name="epub-file" select="concat($output-dir-absolute,encode-for-uri(replace($title,'[/\\?%*:|&quot;&lt;&gt;]','')),'.epub')"/>
    <p:variable name="publication-dir" select="concat($epub-dir,'Publication/')"/>
    <p:variable name="content-dir" select="concat($publication-dir,'Content/')"/>

    <p:documentation>Upgrade the DTBook document(s) to 2005-3</p:documentation>
    <px:upgrade-dtbook name="upgrade-dtbook">
        <p:input port="parameters">
            <p:empty/>
        </p:input>
    </px:upgrade-dtbook>

    <p:documentation>If there is more than one input DTBook document, merge them into a single document.</p:documentation>
    <p:count name="num-input-documents" limit="2"/>
    <p:choose name="choose-to-merge-dtbook-files">
        <p:when test=".//c:result[. > 1]">
            <p:output port="result"/>
            <px:merge-dtbook>
                <p:input port="parameters">
                    <p:empty/>
                </p:input>
                <p:input port="source">
                    <p:pipe port="result" step="upgrade-dtbook"/>
                </p:input>
            </px:merge-dtbook>
        </p:when>
        <p:otherwise>
            <p:output port="result"/>
            <p:identity>
                <p:input port="source">
                    <p:pipe port="result" step="upgrade-dtbook"/>
                </p:input>
            </p:identity>
        </p:otherwise>
    </p:choose>

    <p:documentation>Validate the DTBook input</p:documentation>
    <p:validate-with-relax-ng assert-valid="true" name="validate-dtbook">
        <p:log port="result" href="file:/home/jostein/tmp/dtbook-to-epub3/valid-dtbook.xml"/>
        <p:input port="schema">
            <p:document href="./schema/dtbook-2005-3.rng"/>
        </p:input>
        <p:input port="source">
            <p:pipe port="result" step="choose-to-merge-dtbook-files"/>
        </p:input>
    </p:validate-with-relax-ng>

    <p:documentation>Transform to ZedAI</p:documentation>
    <pxi:dtbook2005-3-to-zedai name="transform-to-zedai">
        <p:log port="result" href="file:/home/jostein/tmp/dtbook-to-epub3/zedai.xml"/>
        <p:input port="source">
            <p:pipe port="result" step="validate-dtbook"/>
        </p:input>
    </pxi:dtbook2005-3-to-zedai>

    <p:documentation>Add the xml:lang attribute</p:documentation>
    <p:choose>
        <p:when test="//z:document/@xml:lang">
            <p:identity/>
        </p:when>
        <p:otherwise>
            <p:choose>
                <p:when test="string-length($language) > 0">
                    <p:add-attribute match="//z:document">
                        <p:with-option name="attribute-name" select="'xml:lang'"/>
                        <p:with-option name="attribute-value" select="$language"/>
                    </p:add-attribute>
                </p:when>
                <p:otherwise>
                    <cx:message message="WARNING: required xml:lang attribute not found, and no 'language' option was passed to the converter."/>
                    <p:identity/>
                </p:otherwise>
            </p:choose>
        </p:otherwise>
    </p:choose>

    <p:documentation>Validate the final ZedAI output.</p:documentation>
    <cx:message message="Validating ZedAI"/>
    <p:validate-with-relax-ng name="validate-zedai" assert-valid="true">
        <p:log port="result" href="file:/home/jostein/tmp/dtbook-to-epub3/valid-zedai.xml"/>
        <p:input port="schema">
            <p:document href="./schema/z3986a-book-0.8/z3986a-book.rng"/>
        </p:input>
    </p:validate-with-relax-ng>

    <p:documentation>Convert the ZedAI Document into several XHTML Documents</p:documentation>
    <p:add-xml-base name="zedai-with-base">
        <p:log port="result" href="file:/home/jostein/tmp/dtbook-to-epub3/zedai-with-base.xml"/>
    </p:add-xml-base>
    <p:group name="zedai-to-html">
        <p:log port="html-files" href="file:/home/jostein/tmp/dtbook-to-epub3/html.xml"/>
        <p:output port="result" primary="true" sequence="true"/>
        <p:output port="html-files" sequence="true">
            <p:pipe port="secondary" step="zedai-to-html.html-chunks"/>
        </p:output>
        <p:identity/>
        <p:xslt name="zedai-to-html.html-single">
            <p:input port="stylesheet">
                <p:document href="http://www.daisy.org/pipeline/modules/zedai-to-html/xslt/zedai-to-html.xsl"/>
            </p:input>
            <p:input port="parameters">
                <p:empty/>
            </p:input>
        </p:xslt>
        <p:insert match="html:head" position="last-child">
            <p:input port="insertion">
                <p:inline xmlns="http://www.w3.org/1999/xhtml">
                    <link rel="stylesheet" type="text/css" href="default.css"/>
                </p:inline>
            </p:input>
        </p:insert>
        <p:add-attribute attribute-name="xml:base" match="/*">
            <p:with-option name="attribute-value" select="concat($content-dir,encode-for-uri($title),'.xhtml')"/>
        </p:add-attribute>
        <p:xslt name="zedai-to-html.html-with-ids">
            <p:input port="stylesheet">
                <p:document href="http://www.daisy.org/pipeline/modules/zedai-to-epub3/xslt/html-id-fixer.xsl"/>
            </p:input>
            <p:input port="parameters">
                <p:empty/>
            </p:input>
        </p:xslt>
        <p:xslt name="zedai-to-html.html-chunks">
            <!--<p:log port="secondary" href="file:/tmp/xproc/html-files.xml"/>-->
            <!--TODO fix links while chunking (see links-to-chunks) -->
            <p:input port="stylesheet">
                <p:document href="http://www.daisy.org/pipeline/modules/zedai-to-epub3/xslt/html-chunker.xsl"/>
            </p:input>
            <p:input port="parameters">
                <p:empty/>
            </p:input>
        </p:xslt>
        <p:sink/>
        <p:for-each name="zedai-to-html.iterate">
            <p:iteration-source>
                <p:pipe port="secondary" step="zedai-to-html.html-chunks"/>
            </p:iteration-source>
            <p:add-xml-base/>
            <p:store indent="true" encoding="utf-8" method="xhtml" include-content-type="false">
                <p:with-option name="href" select="base-uri(/*)"/>
            </p:store>
            <px:fileset-create>
                <p:with-option name="base" select="$content-dir"/>
            </px:fileset-create>
            <px:fileset-add-entry media-type="application/xhtml+xml">
                <p:with-option name="href" select="base-uri(/*)">
                    <p:pipe port="current" step="zedai-to-html.iterate"/>
                </p:with-option>
            </px:fileset-add-entry>
        </p:for-each>
    </p:group>
    <p:sink/>
    <!-- TODO -->

    <p:documentation>Generate the EPUB 3 navigation document</p:documentation>
    <p:group name="navigation-doc">
        <!--<p:log port="html-file" href="file:/tmp/xproc/nav-doc.xml"/>-->
        <p:output port="result" primary="true">
            <p:pipe port="fileset" step="navigation-doc.result"/>
        </p:output>
        <p:output port="html-file">
            <p:pipe port="html-file" step="navigation-doc.result"/>
        </p:output>
        <px:epub3-nav-create-toc name="navigation-doc.toc">
            <p:input port="source">
                <p:pipe port="html-files" step="zedai-to-html"/>
            </p:input>
            <p:with-option name="base-dir" select="$content-dir">
                <p:empty/>
            </p:with-option>
        </px:epub3-nav-create-toc>
        <px:epub3-nav-create-page-list name="navigation-doc.page-list">
            <p:input port="source">
                <p:pipe port="html-files" step="zedai-to-html"/>
            </p:input>
        </px:epub3-nav-create-page-list>
        <px:epub3-nav-aggregate name="navigation-doc.html-file">
            <p:input port="source">
                <p:pipe port="result" step="navigation-doc.toc"/>
                <p:pipe port="result" step="navigation-doc.page-list"/>
            </p:input>
        </px:epub3-nav-aggregate>
        <!--TODO create other nav types (configurable ?)-->
        <p:group name="navigation-doc.result">
            <p:output port="fileset">
                <p:pipe port="result" step="navigation-doc.result.fileset"/>
            </p:output>
            <p:output port="html-file">
                <p:pipe port="result" step="navigation-doc.result.html-file"/>
            </p:output>
            <p:variable name="nav-base" select="concat($publication-dir,'toc.xhtml')"/>
            <p:viewport match="//html:a">
                <p:choose>
                    <p:when test="starts-with(/*/@href,encode-for-uri($title))">
                        <p:add-attribute match="/*" attribute-name="href">
                            <p:with-option name="attribute-value" select="concat(substring-after($content-dir,$publication-dir), /*/@href)"/>
                        </p:add-attribute>
                    </p:when>
                    <p:otherwise>
                        <p:identity/>
                    </p:otherwise>
                </p:choose>
            </p:viewport>
            <p:store indent="true" encoding="utf-8" method="xhtml" include-content-type="false">
                <p:with-option name="href" select="$nav-base"/>
            </p:store>
            <px:fileset-create>
                <p:with-option name="base" select="$content-dir"/>
            </px:fileset-create>
            <px:fileset-add-entry media-type="application/xml+xhtml" name="navigation-doc.result.fileset">
                <p:with-option name="href" select="$nav-base"/>
            </px:fileset-add-entry>
            <p:add-attribute match="/*" attribute-name="xml:base" name="navigation-doc.result.html-file">
                <p:input port="source">
                    <p:pipe port="result" step="navigation-doc.html-file"/>
                </p:input>
                <p:with-option name="attribute-value" select="$nav-base"/>
            </p:add-attribute>
            <p:sink/>
        </p:group>
    </p:group>
    <p:sink/>
    <!-- TODO -->

    <p:documentation>Extract local resources referenced from the XHTML</p:documentation>
    <p:group name="resources">
        <!--<p:log port="result" href="file:/tmp/xproc/resources.xml"/>-->
        <p:output port="result" sequence="true"/>
        <!-- temporarily sequence TODO -->
        <!--TODO call html-utils to get a file set of resource from the XHTML docs-->
        <!--TODO local only or all resources ?-->
        <!--TODO copy resources to the epub dir-->
        <p:identity>
            <p:input port="source">
                <p:pipe port="html-files" step="zedai-to-html"/>
            </p:input>
        </p:identity>
        <p:for-each>
            <p:xslt>
                <p:input port="stylesheet">
                    <p:document href="http://www.daisy.org/pipeline/modules/zedai-to-epub3/xslt/html-get-resources.xsl"/>
                </p:input>
                <p:input port="parameters">
                    <p:empty/>
                </p:input>
            </p:xslt>
        </p:for-each>
        <px:fileset-join/>
        <p:add-attribute match="/*" attribute-name="xml:base">
            <p:with-option name="attribute-value" select="replace(/*/@xml:base,'^(.*/)[^/]*$','$1')">
                <p:pipe port="result" step="zedai-with-base"/>
            </p:with-option>
        </p:add-attribute>
        <!--TODO detect unknown media types-->
        <!--<px:mediatype-detect/>-->
        <px:fileset-copy>
            <p:with-option name="target" select="$content-dir"/>
        </px:fileset-copy>
    </p:group>
    <p:sink/>

    <p:group>
        <px:fileset-create>
            <p:with-option name="base" select="concat(replace(base-uri(),'^(.*/)[^/]*$','$1'),'resources/')">
                <p:inline>
                    <irrelevant/>
                </p:inline>
            </p:with-option>
        </px:fileset-create>
        <px:fileset-add-entry href="default.css" media-type="text/css"/>
        <px:fileset-copy>
            <p:with-option name="target" select="$content-dir"/>
        </px:fileset-copy>
    </p:group>

    <p:identity name="tmp"/>

</p:declare-step>
